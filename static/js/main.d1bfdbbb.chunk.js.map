{"version":3,"sources":["logo.svg","FakeApp.js","TrueApp.js","Mockey.js","Tree.js","Item.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FakeApp","className","src","logo","alt","href","target","rel","TrueApp","props","state","date","Date","this","toLocaleTimeString","React","Component","Mockey","had_eat","isOutOfApple","num_once","setState","prevState","event","value","hint","total_apple","type","onChange","handleChange","bind","onClick","handleeat","Tree","apple_num","Item","array1","listItems","arr","map","number","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,yKC2B1BC,MAvBjB,WACI,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kB,mCCMKC,E,YAfX,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,KAAM,IAAIC,MAFP,E,sEAMjB,OACE,6BACE,6CACA,qCAAWC,KAAKH,MAAMC,KAAKG,qBAA3B,U,GAVYC,IAAMC,WCmDbC,E,YAlDX,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXQ,QAAQ,EACRC,cAAa,EACbC,SAAS,GALM,E,yEASN,IAAD,OACPP,KAAKH,MAAMQ,SAAS,GACrBL,KAAKQ,SAAS,SAAAC,GAAS,MAAK,CAC1BH,cAAc,KAIlBN,KAAKQ,SAAS,SAAAC,GAAS,MAAK,CAC1BJ,QAASI,EAAUJ,QAAQ,EAAKR,MAAMU,c,mCAO7BG,GACXV,KAAKQ,SAAS,CAACD,SAAUG,EAAMjB,OAAOkB,U,+BAItC,IAAIC,EAAK,KAOT,OALEA,EADCZ,KAAKH,MAAMS,aACN,uDAEA,wCAAcN,KAAKJ,MAAMiB,YAAYb,KAAKH,MAAMQ,QAAhD,2BAIN,0EAC4C,2BAAOS,KAAK,SAAUH,MAAOX,KAAKH,MAAMU,SAAWQ,SAAUf,KAAKgB,aAAaC,KAAKjB,QAAQ,6BACtI,6CAAmBA,KAAKH,MAAMQ,QAA9B,WACCO,EACD,6BACE,4BAAQM,QAASlB,KAAKmB,UAAUF,KAAKjB,OAArC,OAAkDA,KAAKH,MAAMU,SAA7D,gB,GA3CSL,IAAMC,WCkBZiB,E,YAhBX,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXwB,UAAU,IAHK,E,sEAQjB,OACE,6BACE,kBAAC,EAAD,CAAQR,YAAab,KAAKH,MAAMwB,iB,GAXvBnB,IAAMC,WCwBVmB,E,YAxBX,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT0B,OAAQ,CAAC,EAAG,EAAG,EAAG,IAHP,E,sEASf,IACMC,EADUxB,KAAKJ,MAAM6B,IACDC,IAAI,SAACC,GAAD,OAC1B,4BAAKA,EAAL,wBAGJ,OACI,6BACI,4BACKH,Q,GAlBFtB,IAAMC,W,MCmBVyB,MAZf,WAEE,OACE,6BACE,kBAAC,EAAD,CAAMH,IAHE,CAAC,EAAE,EAAE,EAAE,EAAG,EAAG,EAAG,KAIxB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d1bfdbbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\n\r\n\r\nfunction FakeApp(){\r\n    return(\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n      </div>\r\n  \r\n    )\r\n  }\r\n  \r\n\r\n  export default FakeApp;","import React from 'react';\r\n\r\nclass TrueApp extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {date: new Date()};\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <h1>Hello, world!</h1>\r\n          <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default TrueApp;","import React from 'react';\r\n\r\nclass Mockey extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        had_eat:0,\r\n        isOutOfApple:false,\r\n        num_once:0\r\n      };\r\n    }\r\n  \r\n    handleeat() {\r\n      if(this.state.had_eat>=50){\r\n        this.setState(prevState => ({\r\n          isOutOfApple: true\r\n        }));\r\n        return;\r\n      }\r\n      this.setState(prevState => ({\r\n        had_eat: prevState.had_eat+this.state.num_once\r\n      }));\r\n      // this.setState({\r\n      //   had_eat:this.state.had_eat+1\r\n      // });\r\n    }\r\n\r\n    handleChange(event){\r\n      this.setState({num_once: event.target.value});\r\n    }\r\n\r\n    render() {\r\n      let hint=null;\r\n      if(this.state.isOutOfApple){\r\n        hint=(<div>there is no apple left</div>);\r\n      }else{\r\n        hint=(<p>There are {this.props.total_apple-this.state.had_eat} apple left on the tree</p>\r\n          );\r\n      }\r\n      return (\r\n        <div>\r\n          how mang apple do you want Mockey to eat :<input type=\"number\"  value={this.state.num_once}  onChange={this.handleChange.bind(this)}/><br/>\r\n          <p>Monkey has eat {this.state.had_eat}  apple</p>\r\n          {hint}\r\n          <div>\r\n            <button onClick={this.handleeat.bind(this)} >eat {this.state.num_once} apple</button>\r\n            {/* <button onClick={()=>this.handleeat()} >eat one apple</button> */}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Mockey;","import React from 'react';\r\nimport Mockey from './Mockey';\r\n\r\nclass Tree extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        apple_num:50\r\n      };\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <Mockey total_apple={this.state.apple_num} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Tree;","import React from 'react';\r\n\r\nclass Item extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array1: [2, 4, 2, 6]\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        const numbers = this.props.arr;\r\n        const listItems = numbers.map((number) =>\r\n            <li>{number}只绵羊</li>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {listItems}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React from 'react';\nimport FakeApp from './FakeApp';\nimport TrueApp from './TrueApp';\nimport Tree from './Tree';\nimport Item from './Item';\nimport './App.css';\n\n\n\nfunction App() {\n  let array2= [9,0,7,2, 4, 2, 6]\n  return (\n    <div>\n      <Item arr={array2}/>\n      <Tree/>\n      <TrueApp/>\n      <FakeApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}